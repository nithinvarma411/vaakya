[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vaakya"
version = "0.1.0"
description = "A voice assistant with local speech-to-text capabilities"
readme = "README.md"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
requires-python = ">=3.8"
dependencies = [
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "python-multipart>=0.0.5",
    "pydantic>=2.0.0",
    "pydub>=0.25.1",
    "faster-whisper>=1.0.0",
    "ctranslate2>=4.0.0",
    "numpy>=1.21.0",
    "ffmpeg-python>=0.2.0",
    "kani[llamacpp]>=1.0.0",
    "ddgs>=2.8.0",
    "fuzzywuzzy>=0.18.0",
    "python-levenshtein>=0.12.0",
    "psutil>=5.9.0"
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.20.0"
]

[tool.ruff]
# Recommended line length to match Black formatter
line-length = 88
# Indent width for code blocks
indent-width = 4
# Target Python version for syntax features
target-version = "py38"

# Exclude directories that should not be linted
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".ruff_cache",
    "venv",
    "build",
    "dist",
    "models"  # Assuming this contains large model files
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes
select = [
    "E4",      # pycodestyle errors
    "E7",      # pycodestyle errors
    "E9",      # pycodestyle errors
    "F",       # Pyflakes
    "B",       # flake8-bugbear
    "I",       # isort
    "UP",      # pyupgrade
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "C4",      # flake8-comprehensions
    "DTZ",     # flake8-datetimez
    "TCH",     # flake8-type-checking
    "PGH",     # pygrep-hooks
    "PL",      # Pylint
    "PIE",     # flake8-pie
    "RUF"      # Ruff-specific rules
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore import violations in __init__.py files
"__init__.py" = ["E402", "F401"]
# Allow asserts in test files
"test_*.py" = ["S101"]

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"
# Like Black, indent with spaces, rather than tabs
indent-style = "space"
# Like Black, respect trailing commas
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.mypy]
# Target Python version
python_version = "3.9"

# Specify the files to check - use explicit package bases
files = ["src"]

# Exclude directories
exclude = [
    ".venv",
    ".mypy_cache",
    "venv",
    "build",
    "dist",
    "models"
]

# Use explicit package bases to resolve module path conflicts
explicit_package_bases = true
mypy_path = ["."]
namespace_packages = true

# Enable strict mode for better type checking
strict = true

# Additional strict settings
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
show_column_numbers = true
show_error_context = true

# Handle missing imports for third-party libraries
ignore_missing_imports = true

# Per-module settings
[[tool.mypy.overrides]]
module = [
    "faster_whisper.*",
    "ctranslate2.*",
    "pydub.*",
    "ffmpeg.*",
    "kani.*",
    "ddgs.*",
    "fuzzywuzzy.*",
    "psutil.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
# Configure pytest for async tests
asyncio_mode = "auto"
testpaths = ["."]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short"